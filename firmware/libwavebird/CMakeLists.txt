# Set minimum CMake version
cmake_minimum_required(VERSION "3.21")

# Configure project and languages
project(wavebird LANGUAGES C)

# Define the target and add the source files
add_library(wavebird STATIC "src/bch3121.c" "src/packet.c")

# Specify the include paths
target_include_directories(wavebird PRIVATE src/autogen PUBLIC include)

# EFR32 platform specific settings
if(CMAKE_CROSSCOMPILING)
  if(DEFINED ZEPHYR_BASE)
    # Building for EFR32 using Zephyr
    # Note: rail_config.h and rail_config.c are not automatically generated by Zephyr,
    # so we expect them to be already present in the src/autogen directory.
    if(NOT CONFIG_SOC_FAMILY_SILABS_S2)
      message(FATAL_ERROR "Only EFR32 series SoCs are currently supported.")
    endif()

    if(NOT CONFIG_SOC_GECKO_CUSTOM_RADIO_PHY)
      message(FATAL_ERROR "Custom radio PHY is required for EFR32 platforms, set CONFIG_SOC_GECKO_CUSTOM_RADIO_PHY in prj.conf.")
    endif()

    # Pull in the Zephyr interface library
    target_link_libraries(wavebird PUBLIC zephyr_interface)
  else()
    # Building for EFR32 using gecko-sdk-cmake
    if(NOT GeckoSDK_FOUND)
      include(FetchContent)
      FetchContent_Declare(
        GeckoSDK
        GIT_REPOSITORY https://github.com/loopj/gecko-sdk-cmake.git
        GIT_TAG main
      )
      FetchContent_MakeAvailable(GeckoSDK)
    endif()

    # Configure automatic generation of rail_config.c and rail_config.h files
    set_rail_config_paths("config/rail/radio_settings_${GECKO_SDK_RAIL_LIB_NAME}.radioconf" "src/autogen")

    # Depend on emlib and rail_lib from the Gecko SDK
    target_link_libraries(wavebird GeckoSDK::emlib GeckoSDK::rail_lib)
  endif()

  # Add platform-specific source files
  target_sources(wavebird PRIVATE "src/platform/efr32/radio_efr32.c" "src/autogen/rail_config.c")
endif()

# Add the test target
if(NOT CMAKE_CROSSCOMPILING)
  add_subdirectory(test)
endif()
